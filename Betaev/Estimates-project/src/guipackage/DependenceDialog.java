/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guipackage;

import datapackage.Algorithm;
import datapackage.Dependence;
import datapackage.MaterialDatabaseHelper;
import datapackage.DependenciesDatabaseHelper;
import java.sql.SQLException;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

public class DependenceDialog extends javax.swing.JDialog implements WindowListener {
    private AlgorithmEditingDialog ParentDialog;
    //ссылки на модели таблиц материалов
    private DependentMaterialsTableModel DepMatTableModel;
    private IndependentMaterialsTableModel IndepMatTableModel;
    private Algorithm SelectedAlg;
    private MaterialDatabaseHelper MDHelper;
    private DependenciesDatabaseHelper DDHelper;
    
    public static double AmountMax = 1000000;

    public DependenceDialog(AlgorithmEditingDialog parent, boolean modal, Algorithm Alg, MaterialDatabaseHelper mathelper, DependenciesDatabaseHelper dephelper) throws ClassNotFoundException, SQLException {
        super(parent, modal);
        //Слушаем закрытие окна.
        addWindowListener(this);
        ParentDialog = parent;
        SelectedAlg = Alg;
        MDHelper = mathelper;
        DDHelper = dephelper;
        //создаем модели таблиц
        DepMatTableModel = new DependentMaterialsTableModel(this, MDHelper);  
        IndepMatTableModel = new IndependentMaterialsTableModel(this, MDHelper, DDHelper, SelectedAlg);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainButtonGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        DependentTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        NothingButton = new javax.swing.JRadioButton();
        NothingDepField = new javax.swing.JTextField();
        SurfaceButton = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        SurfaceIndepField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        SurfaceDepField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        IndependentTable = new javax.swing.JTable();
        OtherButton = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        OtherIndepField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        OtherDepField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        AddButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(10000, 10000));

        DependentTable.setModel(DepMatTableModel);
        DependentTable.setFillsViewportHeight(true);
        DependentTable.setMaximumSize(new java.awt.Dimension(1000, 1000));
        jScrollPane1.setViewportView(DependentTable);

        jLabel1.setText("Выберите материал для добавления в алгоритм:");

        jLabel2.setText("Количество данного материала:");

        MainButtonGroup.add(NothingButton);
        NothingButton.setSelected(true);
        NothingButton.setText("не зависит ни от чего. Постоянное количество:");

        MainButtonGroup.add(SurfaceButton);
        SurfaceButton.setText("зависит от метража поверхности.");

        jLabel3.setText("На каждые");

        jLabel4.setText("метров поверхности необходимо");

        jLabel5.setText("единиц материала.");

        IndependentTable.setModel(IndepMatTableModel);
        IndependentTable.setFillsViewportHeight(true);
        IndependentTable.setMaximumSize(new java.awt.Dimension(1000, 1000));
        jScrollPane2.setViewportView(IndependentTable);

        MainButtonGroup.add(OtherButton);
        OtherButton.setText("зависит от количества другого материала, уже присутствующего в алгоритме (выбрать из списка ниже).");

        jLabel6.setText("На каждые");

        jLabel7.setText("единиц материала из списка ниже необходимо");

        jLabel8.setText("единиц нового материала.");

        AddButton.setText("Добавить материал");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OtherIndepField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OtherDepField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8))
                            .addComponent(OtherButton)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SurfaceButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SurfaceIndepField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SurfaceDepField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(NothingButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NothingDepField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(AddButton)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NothingButton)
                    .addComponent(NothingDepField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(SurfaceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(SurfaceIndepField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SurfaceDepField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OtherButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(OtherIndepField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(OtherDepField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        //Если в таблице зависимых материалов ничего не выбрано.
        int SelectedDepRow = DependentTable.getSelectedRow();
        if (SelectedDepRow == -1)
        {
            MessageHandler.ShowDialog(this, MessageHandler.ERROR_ChooseDependentMaterial);
            return;
        }
        
        //Определяем нажатую радиокнопку
        //если кнопка == "не зависит"
        if (NothingButton.isSelected())
        {
            try {
                //создаем зависимость от ничего
                CreateDependenceOnNothing(SelectedDepRow);
            } catch (IllegalArgumentException e)
            {
                MessageHandler.ShowDialog(this, e.getMessage());
                return;
            } catch (SQLException e)
            {
                MessageHandler.ShowDialog(this, e.getMessage());
                return;
            }
        //если кнопка == "зависит от поверхности"
        } else if (SurfaceButton.isSelected())
        {
            try {
                //создаем зависимость от поверхности
                CreateDependenceOnSurface(SelectedDepRow);
            } catch (IllegalArgumentException e)
            {
                MessageHandler.ShowDialog(this, e.getMessage());
                return;
            } catch (SQLException e)
            {
                MessageHandler.ShowDialog(this, e.getMessage());
                return;
            }
        //если кнопка == "зависит от другого материала"    
        } else if (OtherButton.isSelected())
        {
            //если не выбран независимый материал
            int SelectedIndepRow = IndependentTable.getSelectedRow();
            if (SelectedIndepRow == -1)
            {
                MessageHandler.ShowDialog(this, MessageHandler.ERROR_ChooseIndependentMaterial);
                return;
            }
            
            try {
                //создаем зависимость от поверхности
                CreateDependenceOnOther(SelectedIndepRow, SelectedDepRow);
            } catch (IllegalArgumentException e)
            {
                MessageHandler.ShowDialog(this, e.getMessage());
                return;
            } catch (SQLException e)
            {
                MessageHandler.ShowDialog(this, e.getMessage());
                return;
            }
        }
        
        try {
            ParentDialog.RefreshList();
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
        }
        
        CloseFrame();
    }//GEN-LAST:event_AddButtonActionPerformed

    private void CreateDependenceOnNothing(int SelectedDepRow) throws IllegalArgumentException, SQLException {
        double DependentAmount = ExtractAndValidateNothingDepAmount();
        long DependentId = DepMatTableModel.getIdAt(SelectedDepRow);
        DDHelper.createDependence(SelectedAlg.getId(), Dependence.DEPEND_ON_NOTHING_ID, 0, DependentId, DependentAmount);
    }
    
    private void CreateDependenceOnSurface(int SelectedDepRow) throws IllegalArgumentException, SQLException {
        double IndependentAmount = ExtractAndValidateSurfaceIndepAmount();
        double DependentAmount = ExtractAndValidateSurfaceDepAmount();
        long DependentId = DepMatTableModel.getIdAt(SelectedDepRow);
        DDHelper.createDependence(SelectedAlg.getId(), Dependence.DEPEND_ON_SURFACE_ID, IndependentAmount, DependentId, DependentAmount);
    }    
 
    private void CreateDependenceOnOther(int SelectedIndepRow, int SelectedDepRow) throws IllegalArgumentException, SQLException {
        double IndependentAmount = ExtractAndValidateOtherIndepAmount();
        double DependentAmount = ExtractAndValidateOtherDepAmount();
        long DependentId = DepMatTableModel.getIdAt(SelectedDepRow);
        long IndependentId = IndepMatTableModel.getIdAt(SelectedIndepRow);
        DDHelper.createDependence(SelectedAlg.getId(), IndependentId, IndependentAmount, DependentId, DependentAmount);
    }        
    
    private double ExtractAndValidateNothingDepAmount() throws IllegalArgumentException {
        double Amount;
        
        try {
            //Извлекаем и парсим значение.
            Amount = Double.parseDouble(NothingDepField.getText().trim().replaceAll(",", "."));
        } catch (NumberFormatException e)
        {
            //В поле не число.
            throw new IllegalArgumentException(MessageHandler.ERROR_FieldsAreNotNumbers);
        }

        //Если число вне допустимого диапазона.
        if (Amount <= 0 || Amount > AmountMax)
        {
            throw new IllegalArgumentException(MessageHandler.ERROR_FieldsAreOutOfRange);
        }
        
        //Возвращаем число.
        return Amount;
    }    
    
    private double ExtractAndValidateSurfaceIndepAmount() throws IllegalArgumentException {
        double Amount;
        
        try {
            //Извлекаем и парсим значение.
            Amount = Double.parseDouble(SurfaceIndepField.getText().trim().replaceAll(",", "."));
        } catch (NumberFormatException e)
        {
            //В поле не число.
            throw new IllegalArgumentException(MessageHandler.ERROR_FieldsAreNotNumbers);
        }

        //Если число вне допустимого диапазона.
        if (Amount <= 0 || Amount > AmountMax)
        {
            throw new IllegalArgumentException(MessageHandler.ERROR_FieldsAreOutOfRange);
        }
        
        //Возвращаем число.
        return Amount;
    }        
    
    private double ExtractAndValidateSurfaceDepAmount() throws IllegalArgumentException {
        double Amount;
        
        try {
            //Извлекаем и парсим значение.
            Amount = Double.parseDouble(SurfaceDepField.getText().trim().replaceAll(",", "."));
        } catch (NumberFormatException e)
        {
            //В поле не число.
            throw new IllegalArgumentException(MessageHandler.ERROR_FieldsAreNotNumbers);
        }

        //Если число вне допустимого диапазона.
        if (Amount <= 0 || Amount > AmountMax)
        {
            throw new IllegalArgumentException(MessageHandler.ERROR_FieldsAreOutOfRange);
        }
        
        //Возвращаем число.
        return Amount;
    }            
    
    private double ExtractAndValidateOtherIndepAmount() throws IllegalArgumentException {
        double Amount;
        
        try {
            //Извлекаем и парсим значение.
            Amount = Double.parseDouble(OtherIndepField.getText().trim().replaceAll(",", "."));
        } catch (NumberFormatException e)
        {
            //В поле не число.
            throw new IllegalArgumentException(MessageHandler.ERROR_FieldsAreNotNumbers);
        }

        //Если число вне допустимого диапазона.
        if (Amount <= 0 || Amount > AmountMax)
        {
            throw new IllegalArgumentException(MessageHandler.ERROR_FieldsAreOutOfRange);
        }
        
        //Возвращаем число.
        return Amount;
    }        
    
    private double ExtractAndValidateOtherDepAmount() throws IllegalArgumentException {
        double Amount;
        
        try {
            //Извлекаем и парсим значение.
            Amount = Double.parseDouble(OtherDepField.getText().trim().replaceAll(",", "."));
        } catch (NumberFormatException e)
        {
            //В поле не число.
            throw new IllegalArgumentException(MessageHandler.ERROR_FieldsAreNotNumbers);
        }

        //Если число вне допустимого диапазона.
        if (Amount <= 0 || Amount > AmountMax)
        {
            throw new IllegalArgumentException(MessageHandler.ERROR_FieldsAreOutOfRange);
        }
        
        //Возвращаем число.
        return Amount;
    }          
    
    /**
     * Метод закрывает БД и окно
     */
    public void CloseFrame() {
        //закрываем БД
        DepMatTableModel.CloseDatabase();
        //Закрываем окно.
        this.dispose();
    }
    
    /**
     * Метод срабатывает, когда пользователь пытается закрыть окно.
     * @param e 
     */
    @Override
    public void windowClosing(WindowEvent e) {
        CloseFrame();
    }  
    
    @Override
    public void windowActivated(WindowEvent e) {}
    
    @Override
    public void windowDeactivated(WindowEvent e) {}
    
    @Override
    public void windowDeiconified(WindowEvent e) {}
    
    @Override
    public void windowIconified(WindowEvent e) {}
    
    @Override
    public void windowClosed(WindowEvent e) {}
    
    @Override
    public void windowOpened(WindowEvent e) {}        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JTable DependentTable;
    private javax.swing.JTable IndependentTable;
    private javax.swing.ButtonGroup MainButtonGroup;
    private javax.swing.JRadioButton NothingButton;
    private javax.swing.JTextField NothingDepField;
    private javax.swing.JRadioButton OtherButton;
    private javax.swing.JTextField OtherDepField;
    private javax.swing.JTextField OtherIndepField;
    private javax.swing.JRadioButton SurfaceButton;
    private javax.swing.JTextField SurfaceDepField;
    private javax.swing.JTextField SurfaceIndepField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}

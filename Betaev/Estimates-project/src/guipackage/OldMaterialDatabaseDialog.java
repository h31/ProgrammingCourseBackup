package guipackage;

import javax.swing.DefaultListModel;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import datapackage.MaterialDatabaseHelper;
import datapackage.Material;
import supportpackage.FilenameUtils;
import java.sql.SQLException;

/**
 * Окно, позволяющее редактировать базу материалов.
 * @see datapackage.MaterialDatabaseHelper
 * @see datapackage.MaterialDatabaseRecord
 */
public class OldMaterialDatabaseDialog extends javax.swing.JDialog implements WindowListener{
    
    public static int NameLengthMax = 100;
    public static int UnitLengthMax = 30;
    public static double PriceMin = 0;
    public static double PriceMax = 1000000000;
    
    //ListModel для отображаемого списка материалов.
    DefaultListModel MainListModel;
    //Хелпер для базы данных.
    MaterialDatabaseHelper DbHelper;
    //Выбранная запись базы данных.
    Material ChosenMaterial = null;
    
    /**
     * Конструктор.
     */
    public OldMaterialDatabaseDialog(java.awt.Frame parent, boolean modal) throws ClassNotFoundException, SQLException{
        super(parent, modal);
        //Слушаем закрытие окна.
        addWindowListener(this);
        
        //Создаем хелпер и получаем от него список названий материалов в базе.
        DbHelper = new MaterialDatabaseHelper();
        String[] list = DbHelper.getMaterialsList();

        //Создаем ListModel для списка, заполняем полученными материалами.
        MainListModel = new DefaultListModel();
        for(int i=0; i<list.length; i++)
        {
            MainListModel.addElement(list[i]);
        }
         
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        MainList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        NameField = new javax.swing.JTextField();
        UnitField = new javax.swing.JTextField();
        PriceField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SaveButton = new javax.swing.JButton();
        AddButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setModal(true);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(10000, 10000));

        MainList.setModel(MainListModel);
        MainList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        MainList.setMaximumSize(new java.awt.Dimension(10000, 10000));
        MainList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                MainListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(MainList);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Свойства материала"));

        jLabel1.setText("Название:");

        jLabel2.setText("Единица измерения:");

        jLabel3.setText("Цена:");

        SaveButton.setText("Сохранить изменения");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        AddButton.setText("Добавить как новый");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Удалить выбранный");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NameField)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(PriceField, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                    .addComponent(UnitField))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(SaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                        .addComponent(DeleteButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UnitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveButton)
                    .addComponent(AddButton)
                    .addComponent(DeleteButton)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Метод срабатывает, когда происходит событие со списком материалов.
     * Метод получает от БД значения, описывающие выбранный материал,
     * и заполняет ими поля.
     * @param evt 
     */
    private void MainListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_MainListValueChanged
        //Отбрасываем мусорные срабатывания.
        if (evt.getValueIsAdjusting() == true) return;

        //Отбрасываем, если ничего не выбрано.
        if (MainList.isSelectionEmpty()) return;
        
        //Получаем имя выбранного пользователем материала.
        String ChosenName = (String)MainList.getSelectedValue();
       /* 
        try{
            //Получаем запись БД по имени материала.
            ChosenMaterial = DbHelper.getMaterial(ChosenName);
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, MessageHandler.ERROR_MaterialsDatabaseError);
            return;
        }
        */
        //Помещаем значения из записи в соответствующие поля.
        NameField.setText(ChosenMaterial.getName());
        UnitField.setText(ChosenMaterial.getUnit());
        PriceField.setText(String.format("%1$.2f",ChosenMaterial.getPrice()));
    }//GEN-LAST:event_MainListValueChanged

    /**
     * Метод срабатывает, когда нажата кнопка "удалить".
     * Метод удаляет выбранный материал из списка и из БД.
     * При этом описание материала остается в полях
     * и может быть сохранено обратно.
     * @param evt 
     */
    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        //Если ничего не выбрано.
        if (MainList.isSelectionEmpty()) return;
        try {
            //Удаляем запись в БД.
            DbHelper.deleteMaterial(ChosenMaterial);
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, MessageHandler.ERROR_MaterialsDatabaseError);
            return;
        }

        //Удаляем элемент из списка.
        MainListModel.removeElementAt(MainList.getSelectedIndex());
    }//GEN-LAST:event_DeleteButtonActionPerformed

    /**
     * Метод срабатывает, когда нажата кнопка "сохранить".
     * Метод изменяет запись выбранного материала в БД.
     * @param evt 
     */
    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        //Если ничего не выбрано.
        if (MainList.isSelectionEmpty()) return;
        
        boolean NameHasChanged = false;
        String OldName;
        String NewName;
        
        try{
            //извлекаем значения полей
            OldName = ChosenMaterial.getName();
            NewName = ExtractAndValidateName();
            //Изменилось ли имя?
            if (! OldName.equals(NewName))
            {
                NameHasChanged = true;
                //Не совпало ли имя с уже имеющимся?
                if (MainListModel.contains(NewName))
                {
                    throw new IllegalArgumentException(MessageHandler.ERROR_NameAlreadyExists);
                }
                ChosenMaterial.setName(NewName);
            }
            
            ChosenMaterial.setUnit(ExtractAndValidateUnit());
            ChosenMaterial.setPrice(ExtractAndValidatePrice());
        } catch (IllegalArgumentException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            return;
        }
        
        //запись в бд
        try {
            DbHelper.setMaterial(ChosenMaterial);
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, MessageHandler.ERROR_MaterialsDatabaseError);
            return;
        }
        
        //изменить имя в списке, если необходимо
        if (NameHasChanged == true)
        {
            MainListModel.set(MainList.getSelectedIndex(), NewName);
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        String name;
        String unit;
        double price;
        
        try{
            //извлекаем значения полей
            name = ExtractAndValidateName();
            //Проверяем, нет ли уже такого имени
            if (MainListModel.contains(name))
            {
                throw new IllegalArgumentException(MessageHandler.ERROR_NameAlreadyExists);
            }
            unit = ExtractAndValidateUnit();
            price = ExtractAndValidatePrice();
        } catch (IllegalArgumentException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            return;
        }
        /*
        //добавление в БД
        try {
            DbHelper.createRecord(name, unit, price);
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, MessageHandler.ERROR_MaterialsDatabaseError);
            return;
        }
        */
        //добавление в список
        MainListModel.addElement(name);
    }//GEN-LAST:event_AddButtonActionPerformed

    private String ExtractAndValidateName() throws IllegalArgumentException {
        String name = NameField.getText().trim();
        
        //если пусто
        if (name.equals("")) {
            throw new IllegalArgumentException(MessageHandler.ERROR_MaterialNameIsEmpty);
        }
        
        //Если имя слишком длинное.
        if (name.length() > NameLengthMax) {
            throw new IllegalArgumentException(MessageHandler.ERROR_MaterialNameIsTooLong);
        }
        
        //Если есть небезопасные символы
        if(name.matches(FilenameUtils.NonSafeSymbolsPattern)) {
            //throw new IllegalArgumentException(MessageHandler.ERROR_IllegalMaterialName);
            MessageHandler.ShowDialog(this, MessageHandler.MESSAGE_SymbolsWillBeReplaced);
            name = FilenameUtils.replaceNonSafeSymbols(name);
        }
        
        return name;
    }
    
    private String ExtractAndValidateUnit() throws IllegalArgumentException {
        String unit = UnitField.getText().trim();
        
        //если пусто
        if (unit.equals("")) {
            throw new IllegalArgumentException(MessageHandler.ERROR_UnitIsEmpty);
        }
        
        //Если имя слишком длинное.
        if (unit.length() > UnitLengthMax) {
            throw new IllegalArgumentException(MessageHandler.ERROR_UnitIsTooLong);
        }
        
        //Если есть небезопасные символы
        if(unit.matches(FilenameUtils.NonSafeSymbolsPattern)) {
            //throw new IllegalArgumentException(MessageHandler.ERROR_IllegalMaterialName);
            MessageHandler.ShowDialog(this, MessageHandler.MESSAGE_SymbolsWillBeReplaced);
            unit = FilenameUtils.replaceNonSafeSymbols(unit);
        }
        
        return unit;
    }
    
    private double ExtractAndValidatePrice() throws IllegalArgumentException{
        double price;
        
        try {
            //Извлекаем и парсим значение.
            price = Double.parseDouble(PriceField.getText().trim().replaceAll(",", "."));
        } catch (NumberFormatException e)
        {
            //В поле не число.
            throw new IllegalArgumentException(MessageHandler.ERROR_PriceIsNotNumber);
        }

        //Если число вне допустимого диапазона.
        if (price < PriceMin || price > PriceMax)
        {
            throw new IllegalArgumentException(MessageHandler.ERROR_PriceIsOutOfRange);
        }
        
        return price;
    }
    
    /**
     * Метод срабатывает, когда пользователь пытается закрыть окно.
     * @param e 
     */
    @Override
    public void windowClosing(WindowEvent e) {
        //Если БД открыта.
        if(DbHelper != null)
        {
            //Закрываем БД.
            DbHelper.close();
        }
        //Закрываем окно.
        this.dispose();
    }  
    
    @Override
    public void windowActivated(WindowEvent e) {}
    
    @Override
    public void windowDeactivated(WindowEvent e) {}
    
    @Override
    public void windowDeiconified(WindowEvent e) {}
    
    @Override
    public void windowIconified(WindowEvent e) {}
    
    @Override
    public void windowClosed(WindowEvent e) {}
    
    @Override
    public void windowOpened(WindowEvent e) {}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JList MainList;
    private javax.swing.JTextField NameField;
    private javax.swing.JTextField PriceField;
    private javax.swing.JButton SaveButton;
    private javax.swing.JTextField UnitField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

package guipackage;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import jxl.write.WriteException;
import logicpackage.LogicHelper;
import supportpackage.EstimateProperties;
import supportpackage.FilenameUtils;
import supportpackage.Estimate;
import datapackage.DataManager;

//TODO беспричинные класснотфаунд
//TODO о проге, помощь

/**
 * Основное окно программы.
 */
public class MainFrame extends javax.swing.JFrame implements WindowListener{
    
    private static String TITLE_MainFrame = "Estimates";
    private static String TITLE_MaterialDatabaseDialog = "Редактирование базы материалов";
    private static String TITLE_AlgorithmsListDialog = "Список алгоритмов";    
    
    public static int EmptyLinesMax = 100;
    public static int EmptyLinesDefault = 0;
    
    private DataManager dataManager;
    private RoomsTableModel MainTableModel;
    private Estimate MainEstimate;

    /**
     * Конструктор.
     */
    public MainFrame() {
        //Отслеживаем закрытие окна.
        addWindowListener(this);
        MainEstimate = new Estimate();
        //создаем пока еще неинициализированный датаменеджер
        dataManager = new DataManager();
        //создаем модель таблицы
        MainTableModel = new RoomsTableModel(this, dataManager, MainEstimate);          
        initComponents();
    }
    
    public void InitDataManager() {
        System.err.println("data manager init started");
        try {
            dataManager.Init();
        } catch (ClassNotFoundException e)
        {
            MessageHandler.ShowDialog(this, MessageHandler.ERROR_JdbcError);
            CloseFrame();
            return;
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            CloseFrame();
            return;
        }            
        System.err.println("data manager init succeeded");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OutputFileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        AbsolutePathField = new javax.swing.JTextField();
        PathButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        EmptyLinesField = new javax.swing.JTextField();
        CreateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        AddButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewEstimateMenuItem = new javax.swing.JMenuItem();
        ExitMenuItem = new javax.swing.JMenuItem();
        DatabasesMenu = new javax.swing.JMenu();
        MaterialsMenuItem = new javax.swing.JMenuItem();
        AlgorithmsMenuItem = new javax.swing.JMenuItem();

        OutputFileChooser.setAcceptAllFileFilterUsed(false);
        OutputFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        OutputFileChooser.setDialogTitle("Выберите файл");
        OutputFileChooser.setFileFilter(new ExcelWorkbookFilter());
        OutputFileChooser.setForeground(java.awt.Color.white);
        OutputFileChooser.setSelectedFile(new java.io.File("C:\\Java\\NetBeans 7.1\\bin\\смета1.xls"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setText("Создать файл:");

        AbsolutePathField.setEditable(false);

        PathButton.setText("Обзор");
        PathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PathButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Пустые строки в начале:");

        EmptyLinesField.setText("0");

        CreateButton.setText("Создать смету");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(10000, 10000));

        jTable1.setModel(MainTableModel);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setFillsViewportHeight(true);
        jTable1.setMaximumSize(new java.awt.Dimension(1000, 1000));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Список помещений (чтобы изменить название, дважды кликните по нему):");

        AddButton.setText("Добавить");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        EditButton.setText("Изменить");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Удалить");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        FileMenu.setText("Файл");

        NewEstimateMenuItem.setText("Новая смета");
        NewEstimateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewEstimateMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(NewEstimateMenuItem);

        ExitMenuItem.setText("Выход");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(ExitMenuItem);

        jMenuBar1.add(FileMenu);

        DatabasesMenu.setText("Базы данных");

        MaterialsMenuItem.setText("Материалы");
        MaterialsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaterialsMenuItemActionPerformed(evt);
            }
        });
        DatabasesMenu.add(MaterialsMenuItem);

        AlgorithmsMenuItem.setText("Алгоритмы");
        AlgorithmsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlgorithmsMenuItemActionPerformed(evt);
            }
        });
        DatabasesMenu.add(AlgorithmsMenuItem);

        jMenuBar1.add(DatabasesMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AbsolutePathField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PathButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(EmptyLinesField, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(EditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(CreateButton))
                        .addGap(0, 106, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AbsolutePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PathButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(EmptyLinesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EditButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CreateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Метод срабатывает, когда нажата кнопка "Обзор".
     * @param evt 
     */
    private void PathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PathButtonActionPerformed
        //Показываем окно выбора файла.
        int returnVal = OutputFileChooser.showOpenDialog(this);
        //Если пользователь выбрал файл.
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //Получаем абсолютный путь к файлу, помещаем в поле "путь к файлу".
            File OutputFile = OutputFileChooser.getSelectedFile();
            AbsolutePathField.setText(OutputFile.getAbsolutePath());
            //Если файл уже существует, выводим предупреждение о замене.
            if (OutputFile.exists()) {
                MessageHandler.ShowDialog(this, MessageHandler.MESSAGE_FileAlreadyExists);
            }
        } else {
            System.err.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_PathButtonActionPerformed
    
    /**
     * Метод срабатывает, когда нажата кнопка "создать смету".
     * Метод создает ЛогикХелпер и передает ему все необходимое.
     * @param evt 
     * @see logicpackage.LogicHelper
     * @see supportpackage.TaskDescription
     */
    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        
        //Описание задачи включает в себя все,
        //что нужно знать ЛогикХелперу для создания сметы.
        EstimateProperties Props;
        
        try{
            //Создаем описание задачи.
            Props = CreateEstimateProperties();
        } catch (IllegalArgumentException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            return;
        }
         
        try {
            //Создаем ЛогикХелпер, передаем ему описание задачи, выполняем создание сметы.
            LogicHelper helper = new LogicHelper(dataManager);
            helper.CalculateEstimates(MainEstimate, Props);
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            return;
        } catch (IOException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            return;
        } catch (WriteException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            return;
        } catch (Exception e)
        {
            MessageHandler.ShowDialog(this, MessageHandler.ERROR_UnknownError);
            return;
        }
        
        //Показываем уведомление о создании сметы.
        MessageHandler.ShowDialog(this, MessageHandler.MESSAGE_Success);
    }//GEN-LAST:event_CreateButtonActionPerformed

    /**
     * Метод срабатывает, когда выбран пункт меню "Файл > Выход".
     * @param evt 
     */
    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        //Закрываем окно.
        this.dispose();
    }//GEN-LAST:event_ExitMenuItemActionPerformed

    /**
     * Метод срабатывает, когда выбран пункт меню "Файл > Новая смета".
     * Метод сбрасывает значения полей на дефолтные.
     * @param evt 
     * @see guipackage.MaterialDatabaseDialog
     */
    private void NewEstimateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewEstimateMenuItemActionPerformed
        //Сбрасываем значения полей на дефолтные.
        AbsolutePathField.setText("");
        EmptyLinesField.setText(Integer.toString(EmptyLinesDefault));
        //очищаем таблицу
        MainTableModel.ClearTable();
    }//GEN-LAST:event_NewEstimateMenuItemActionPerformed

    /**
     * Метод срабатывает, когда выбран пункт меню "Базы данных > Материалы".
     * Метод открывает окно редактирования базы материалов.
     * @param evt 
     */
    private void MaterialsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaterialsMenuItemActionPerformed
        //Новое окно.
        MaterialDatabaseDialog dialog;
        
        try
        {
            //Создаем новое окно.
            dialog = new MaterialDatabaseDialog(this, true, dataManager);
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            return;
        }
        
        //Задаем положение, модальность, заголовок. Показываем.
        dialog.setLocationRelativeTo(this);
        dialog.setModal(true);
        dialog.setTitle(TITLE_MaterialDatabaseDialog);
        dialog.setVisible(true);
    }//GEN-LAST:event_MaterialsMenuItemActionPerformed

    private void AlgorithmsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlgorithmsMenuItemActionPerformed
        //Новое окно.
        AlgorithmsListDialog dialog;
        
        try
        {
            //Создаем новое окно.        
            dialog = new AlgorithmsListDialog(this, true, dataManager);
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            return;
        }
        
        //Задаем положение, модальность, заголовок. Показываем.
        dialog.setLocationRelativeTo(this);
        dialog.setModal(true);
        dialog.setTitle(TITLE_AlgorithmsListDialog);
        dialog.setVisible(true);
    }//GEN-LAST:event_AlgorithmsMenuItemActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        MainTableModel.AddRoom();
        //jTable1.changeSelection(jTable1.getRowCount() - 1, 1, false, false);
    }//GEN-LAST:event_AddButtonActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        //Если ничего не выбрано.
        int SelectedRow = jTable1.getSelectedRow();
        if (SelectedRow == -1) return;
        MainTableModel.EditRoom(SelectedRow);
    }//GEN-LAST:event_EditButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        //Если ничего не выбрано.
        int SelectedRow = jTable1.getSelectedRow();
        if (SelectedRow == -1) return;
        MainTableModel.DeleteRoom(SelectedRow);
    }//GEN-LAST:event_DeleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception{
        //Look and Feel.
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //Перевод надписей в окне выбора файла.
        LocalizeLookAndFeel();

        //Создаем и показываем основное окно.
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MainFrame window = new MainFrame();
                window.setLocationRelativeTo(null);
                window.setTitle(TITLE_MainFrame);
                window.setVisible(true);
                System.err.println("MainFrame is visible");
                window.InitDataManager();
            }
        });
    }
    
    /**
     * Метод извлекает значения полей и создает из них
     * описание задачи, необходимое для работы ЛогикХелпера.
     * @return описание задачи.
     * @throws IllegalArgumentException если поля содержат недопустимые значения.
     * @see logicpackage.LogicHelper
     */
    private EstimateProperties CreateEstimateProperties() throws IllegalArgumentException {
        //Извлекаем и проверяем значения полей.
        String AbsolutePath = ExtractAndValidateAbsolutePath();
        int EmptyLines = ExtractAndValidateEmptyLines();
        
        //Создаем
        return new EstimateProperties(AbsolutePath, EmptyLines);
    }
    
    /**
     * Метод извлекает и проверяет значение поля "путь к файлу".
     * @return значение поля.
     * @throws IllegalArgumentException если поле содержит недопустимое значение.
     */
    private String ExtractAndValidateAbsolutePath() throws IllegalArgumentException {
        //Извлекаем значение.
        String path = AbsolutePathField.getText().trim();
        
        //Если пусто.
        if (path.equals("")) {
            throw new IllegalArgumentException(MessageHandler.ERROR_AbsolutePathIsEmpty);
        }

        //Получаем расширение файла.
        String extension = FilenameUtils.getExtension( FilenameUtils.getName(path) );
        
        //Если расширение не .xls и не пустое.
        if ( !( extension.equals("xls") || extension.equals("") ) ) {
            throw new IllegalArgumentException(MessageHandler.ERROR_WrongTypeOfFile);
        }
        
        //Возвращаем путь.
        return path;
    }

    /**
     * Метод извлекает и проверяет значение поля "пустые строки".
     * @return значение поля.
     * @throws IllegalArgumentException если поле содержит недопустимое значение.
     */
    private int ExtractAndValidateEmptyLines() throws IllegalArgumentException {
        int emptylines;
        
        try {
            //Извлекаем и парсим значение.
            emptylines = Integer.parseInt(EmptyLinesField.getText().trim());
        } catch (NumberFormatException e)
        {
            //В поле не число.
            throw new IllegalArgumentException(MessageHandler.ERROR_EmptyLinesIsNotNumber);
        }

        //Если число вне допустимого диапазона.
        if (emptylines < 0 || emptylines > EmptyLinesMax)
        {
            throw new IllegalArgumentException(MessageHandler.ERROR_EmptyLinesIsOutOfRange);
        }
        
        //Возвращаем число.
        return emptylines;
    }
    
    /**
     * Метод переводит надписи в окне выбора файла.
     */
    private static void LocalizeLookAndFeel () {
        UIManager.put("FileChooser.lookInLabelText", "Смотреть в:");
        UIManager.put("FileChooser.upFolderToolTipText", "На один уровень вверх");
        UIManager.put("FileChooser.homeFolderToolTipText", "Домой");
        UIManager.put("FileChooser.desktopFolderToolTipText", "Домой");
        UIManager.put("FileChooser.newFolderToolTipText", "Создать новую папку"); 
        UIManager.put("FileChooser.listViewButtonToolTipText", "Список");
        UIManager.put("FileChooser.detailsViewButtonToolTipText", "Подробно"); 
        UIManager.put("FileChooser.fileNameHeaderText", "Имя"); 
        UIManager.put("FileChooser.fileSizeHeaderText", "Размер"); 
        UIManager.put("FileChooser.fileTypeHeaderText", "Тип"); 
        UIManager.put("FileChooser.fileDateHeaderText", "Изменен"); 
        UIManager.put("FileChooser.fileAttrHeaderText", "Атрибуты"); 
        UIManager.put("FileChooser.fileSizeKiloBytes", "{0} Кб"); 
        UIManager.put("FileChooser.fileSizeMegaBytes", "{0} Мб"); 
        UIManager.put("FileChooser.fileSizeGigaBytes", "{0} Гб"); 
        UIManager.put("FileChooser.viewMenuLabelText", "Настроить вид"); 
        UIManager.put("FileChooser.listViewActionLabelText", "Список"); 
        UIManager.put("FileChooser.detailsViewActionLabelText", "Подробно"); 
        UIManager.put("FileChooser.refreshActionLabelText", "Обновить"); 
        UIManager.put("FileChooser.newFolderActionLabelText", "Новая папка"); 
        UIManager.put("FileChooser.fileNameLabelText", "Имя файла:"); 
        UIManager.put("FileChooser.filesOfTypeLabelText", "Типы файлов:"); 
        UIManager.put("FileChooser.acceptAllFileFilterText", "Все файлы");
        UIManager.put("FileChooser.saveButtonText", "Сохранить");
        UIManager.put("FileChooser.openButtonText", "Сохранить");
        UIManager.put("FileChooser.saveButtonToolTipText", "Сохранить");
        UIManager.put("FileChooser.openButtonToolTipText", "Сохранить");
        UIManager.put("FileChooser.cancelButtonText", "Отмена");
        UIManager.put("FileChooser.cancelButtonToolTipText", "Отмена");        
        UIManager.put("FileChooser.updateButtonText", "Обновить");    
        UIManager.put("FileChooser.updateButtonToolTipText", "Обновить");    
        UIManager.put("FileChooser.helpButtonText", "Помощь");
        UIManager.put("FileChooser.helpButtonToolTipText", "Помощь");
    }
    
    public void CloseFrame() {
        this.dispose();
    }    
    
    /**
     * Метод срабатывает, когда пользователь пытается закрыть окно.
     * @param e 
     */
    @Override
    public void windowClosing(WindowEvent e) {
        CloseFrame();
    }  
    
    @Override
    public void windowActivated(WindowEvent e) {}
    
    @Override
    public void windowDeactivated(WindowEvent e) {}
    
    @Override
    public void windowDeiconified(WindowEvent e) {}
    
    @Override
    public void windowIconified(WindowEvent e) {}
    
    @Override
    public void windowClosed(WindowEvent e) {}
    
    @Override
    public void windowOpened(WindowEvent e) {}    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AbsolutePathField;
    private javax.swing.JButton AddButton;
    private javax.swing.JMenuItem AlgorithmsMenuItem;
    private javax.swing.JButton CreateButton;
    private javax.swing.JMenu DatabasesMenu;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JTextField EmptyLinesField;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem MaterialsMenuItem;
    private javax.swing.JMenuItem NewEstimateMenuItem;
    private javax.swing.JFileChooser OutputFileChooser;
    private javax.swing.JButton PathButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

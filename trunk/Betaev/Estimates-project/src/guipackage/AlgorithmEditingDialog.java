/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guipackage;

import datapackage.Algorithm;
import datapackage.Dependence;
import datapackage.DependenciesDatabaseHelper;
import datapackage.Material;
import datapackage.MaterialDatabaseHelper;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;

public class AlgorithmEditingDialog extends javax.swing.JDialog implements WindowListener {
    
    private static String TITLE_AddDependenceDialog = "Добавление материала в алгоритм"; 
    
    //TODO кнопка проверить циклы?
    
    //алгоритм
    private Algorithm SelectedAlg;
    //список зависимостей
    private ArrayList<Dependence> Deps;    
    //ListModel для отображаемого списка описаний
    private DefaultListModel MainListModel;
    //Хелперы для баз данных.
    private MaterialDatabaseHelper MDHelper;
    private DependenciesDatabaseHelper DDHelper;    
    
    public AlgorithmEditingDialog(javax.swing.JDialog parent, boolean modal, Algorithm algrthm, MaterialDatabaseHelper mathelper, DependenciesDatabaseHelper dephelper) throws SQLException {
        super(parent, modal);
        //Слушаем закрытие окна.
        addWindowListener(this);
        //алгоритм
        SelectedAlg = algrthm;
        //хелперы
        MDHelper = mathelper;
        DDHelper = dephelper;
        
        //получаем список зависимостей от БД
        Deps = DDHelper.getDependencies(SelectedAlg.getId());
        //создаем модель списка описаний
        MainListModel = new DefaultListModel();
        //заполняем список описаний
        for (int i=0; i<Deps.size(); i++)
        {
            //создаем текстовое описание зависимости
            MainListModel.addElement( CreateDependenceDescription(Deps.get(i)) );
        }
        initComponents();
    }
    
    public void RefreshList() throws SQLException{
        //получаем список зависимостей от БД
        Deps = DDHelper.getDependencies(SelectedAlg.getId());
        //очищаем список описаний
        MainListModel.clear();
        //заполняем список описаний заново
        for (int i=0; i<Deps.size(); i++)
        {
            //создаем текстовое описание зависимости
            MainListModel.addElement( CreateDependenceDescription(Deps.get(i)) );
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MainList = new javax.swing.JList();
        AddButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setText("Список материалов:");

        MainList.setModel(MainListModel);
        MainList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        MainList.setMaximumSize(new java.awt.Dimension(10000, 10000));
        jScrollPane1.setViewportView(MainList);

        AddButton.setText("Добавить");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Удалить");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        //Новое окно.
        DependenceDialog dialog;
        
        try
        {
            //Создаем новое окно.        
            dialog = new DependenceDialog(this, true, SelectedAlg, MDHelper, DDHelper);
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            return;
        } catch (Exception e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
            return;
        }
        
        //Задаем положение, модальность, заголовок. Показываем.
        dialog.setLocationRelativeTo(this);
        dialog.setModal(true);
        dialog.setTitle(TITLE_AddDependenceDialog);
        dialog.setVisible(true);
    }//GEN-LAST:event_AddButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        //Если ничего не выбрано.
        int SelectedIndex = MainList.getSelectedIndex();
        if (SelectedIndex == -1) return;
        //получаем выбранную зависимость
        Dependence SelectedDep = Deps.get(SelectedIndex);
        try{
            //удаляем из БД
            DDHelper.deleteDependence(SelectedDep);
            //обновляем списки
            RefreshList();
        } catch (SQLException e)
        {
            MessageHandler.ShowDialog(this, e.getMessage());
        }    
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private String CreateDependenceDescription(Dependence dep) throws SQLException{
        Material DependentMat = MDHelper.getMaterial(dep.getDependentId());
        String Description = "Необходимо " + dep.getDependentFactor() + " [" + DependentMat.getName() + ", " + DependentMat.getUnit() + "]";
        
        long IndependentId = dep.getIndependentId();
        if (IndependentId == Dependence.DEPEND_ON_NOTHING_ID)
        {
            Description += " независимо.";
        }
        else if (IndependentId == Dependence.DEPEND_ON_SURFACE_ID)
        {
            Description += " на каждые " + dep.getIndependentFactor() + " метров поверхности.";
        }
        else
        {
            Material IndependentMat = MDHelper.getMaterial(dep.getIndependentId());
            Description += " на каждые " + dep.getIndependentFactor() + " [" + IndependentMat.getName() + ", " + IndependentMat.getUnit() + "].";
        }
        return Description;
    }
    
    /**
     * Метод срабатывает, когда пользователь пытается закрыть окно.
     * @param e 
     */
    @Override
    public void windowClosing(WindowEvent e) {
        //Если БД открыта.
        if(MDHelper != null)
        {
            //Закрываем БД.
            MDHelper.close();
        }
        
        //Если БД открыта.
        if(DDHelper != null)
        {
            //Закрываем БД.
            DDHelper.close();
        }
        
        //Закрываем окно.
        this.dispose();
    }  
    
    @Override
    public void windowActivated(WindowEvent e) {}
    
    @Override
    public void windowDeactivated(WindowEvent e) {}
    
    @Override
    public void windowDeiconified(WindowEvent e) {}
    
    @Override
    public void windowIconified(WindowEvent e) {}
    
    @Override
    public void windowClosed(WindowEvent e) {}
    
    @Override
    public void windowOpened(WindowEvent e) {}       
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JList MainList;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
